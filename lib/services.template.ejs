'use strict';

var React = require('react-native');
var {
  AsyncStorage,
} = React;
var fetchFactory = require('fetch-factory').default;

var urlBase = "http://10.0.3.2:9000/<%-: urlBase %>";
var authHeader = 'authorization';
var token = null;
AsyncStorage.getItem("apiToken").then(function(response) {
  token = response;
  console.log(token);
});

function getHost(url) {
  var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
  return m ? m[1] : null;
}

//var urlBaseHost = getHost(urlBase) || location.host;

<% for (var modelName in models) {
     var meta = models[modelName];

     // capitalize the model name
     modelName = modelName[0].toUpperCase() + modelName.slice(1);
-%>
var <%-: modelName %> = fetchFactory.create({
  url: urlBase + <%-: meta.ctor.getFullPath() | q %>,
  interceptors: {
    request: function(request) {
      request.headers[authHeader] = token;
      console.log(request);
      return request;
    }
  },
  }, {
  <% meta.methods.forEach(function(action) {
     var methodName = action.name.split('.').join('$');
  -%>
  <%-: methodName | q %>: {
  <% if (action.hasResourceParams) { -%>
    params: {
  <%   action.resourceParams.forEach(function(param, i, arr) { -%>
          '<%= param.arg %>': '@<%= param.arg %>'<%= i < arr.length -1 ? ',' : '' %>
  <%   }); //action.params.foreach -%>
      },
  <% } -%>
      url: urlBase + <%-: action.getFullPath() | q %>,
        method: <%-: action.getHttpMethod() | q %>
    },
  <% }); // meta.methods.foreach -%>
});

<% } // for modelName in models -%>

module.exports = {
<% for (var modelName in models) {
     var meta = models[modelName];

     // capitalize the model name
     modelName = modelName[0].toUpperCase() + modelName.slice(1);
-%>
  <%-: modelName %>,
<% } // for modelName in models -%>
}
